{
	"querySelector()": {
		"prefix": "qs",
		"body": [
			"${2:document}.querySelector('$1')$0"
		],
		"description": "Query Selector"
	},

	"querySelectorAll()": {
		"prefix": "qsa",
		"body": [
			"${2:document}.querySelectorAll('$1')$0"
		],
		"description": "Query Selector All"
	},

	"getElementById()": {
		"prefix": "gid",
		"body": [
			"document.getElementById('$1')$0"
		],
		"description": "Get element by ID"
	},

	"getElementsByClassName()": {
		"prefix": "gcn",
		"body": [
			"${2:document}.getElementsByClassName('$1')$0"
		],
		"description": "Get elements by class name"
	},

	"Random Number Generator": {
		"prefix": "rng",
		"body": [
			"Math.floor(Math.random() * (Math.floor(${2:max}) - Math.ceil(${1:min}) + 1)) + Math.ceil(${1:min})"
		],
		"description": "Generate number between 'min' and 'max'"
	},

	"setTimeout()": {
		"prefix": "timeout",
		"body": [
			"setTimeout(function() { $0}, ${1:100});"
		],
		"description": "setTimeout()"
	},

	"setInterval()": {
		"prefix": "interval",
		"body": [
			"setInterval(function() { $0}, ${1:100});"
		],
		"description": "setInterval()"
	},

	"Comment Block": {
		"prefix": "comB",
		"body": [
			"/**",
			" * ",
			" * $0",
			" * ",
			"**/",
		],
		"description": "Multi-line comment block"
	},

	"DOM: Ready": {
		"prefix": "ready",
		"body": [
			"function checkReady(isReady) {",
			"\tlet attachEvent = document.attachEvent ? document.readyState === \"complete\" : document.readyState !== \"loading\";",
			"\tattachEvent ? isReady() : document.addEventListener('DOMContentLoaded', isReady);",
			"}",
			"checkReady(function() {",
			"\t$0",
			"});//DOM is ready",
		],
		"description": "Execute callback function when DOM is ready."
	},

	"Remove Element": {
		"prefix": "removeMe",
		"body": [
			"$0.parentElement.removeChild($0)",
		],
		"description": "Remove HTML Element"
	},

	"TODO Comment": {
		"prefix": "tdc",
		"body": [
			"//\t\t- $0",
		],
		"description": "//\t\t- "
	},

	"console.log()": {
		"prefix": "log",
		"body": [
			"console.log($0);",
		],
		"description": "console.log();"
	},

	"ESLint console.log()": {
		"prefix": "eslog",
		"body": [
			"/* eslint-disable no-console*/",
			"console.log($0);",
			"/* eslint-enable no-console*/",
		],
		"description": "Bypass ESLint no-console"
	},

// ^ COPY TO JSREACT ^

}